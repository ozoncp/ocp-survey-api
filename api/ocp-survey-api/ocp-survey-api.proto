syntax = "proto3";

import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

package ocp.survey.api;

option go_package = "github.com/ozoncp/ocp-survey-api/pkg/ocp-survey-api;ocp_survey_api";

// Сервис опросов
service OcpSurveyApi {

    // Создает новый опрос
    rpc CreateSurveyV1(CreateSurveyV1Request) returns (CreateSurveyV1Response) {
        option (google.api.http) = {
            post: "/v1/surveys"
            body: "*"
        };
    }

    // Создает несколько новых опросов
    rpc MultiCreateSurveyV1(MultiCreateSurveyV1Request) returns (MultiCreateSurveyV1Response) {
        option (google.api.http) = {
            post: "/v1/surveys/batch"
            body: "*"
        };
    }

    // Возвращает описание опроса по ID
    rpc DescribeSurveyV1(DescribeSurveyV1Request) returns (DescribeSurveyV1Response) {
        option (google.api.http) = {
            get: "/v1/surveys/{survey_id}"
        };
    }

    // Возвращает список опросов
    rpc ListSurveysV1(ListSurveysV1Request) returns (ListSurveysV1Response) {
        option (google.api.http) = {
            get: "/v1/surveys"
        };
    }

    // Обновляет существующий опрос
    rpc UpdateSurveyV1(UpdateSurveyV1Request) returns (UpdateSurveyV1Response) {
        option (google.api.http) = {
            put: "/v1/surveys"
            body: "*"
        };
    }

    // Удаляет опрос
    rpc RemoveSurveyV1(RemoveSurveyV1Request) returns (RemoveSurveyV1Response) {
        option (google.api.http) = {
            delete: "/v1/surveys/{survey_id}"
        };
    }
}


// Описание опроса
message Survey {
    uint64 id = 1;
    uint64 user_id = 2;
    string link = 3;
}

message CreateSurveyV1Request {
    uint64 user_id = 1 [(validate.rules).uint64.gt = 0];
    string link = 2;
}

message CreateSurveyV1Response {
    uint64 survey_id = 1;
}

message MultiCreateSurveyV1Request {
    repeated CreateSurveyV1Request surveys = 1 [(validate.rules).repeated.min_items = 1];
}

message MultiCreateSurveyV1Response {
    repeated uint64 survey_ids = 1;
}

message DescribeSurveyV1Request {
    uint64 survey_id = 1 [(validate.rules).uint64.gt = 0];
}

message DescribeSurveyV1Response {
    Survey survey = 1;
}

message ListSurveysV1Request {
    uint64 limit = 1 [(validate.rules).uint64.gt = 0];
    uint64 offset = 2 [(validate.rules).uint64.gte = 0];
}

message ListSurveysV1Response {
    repeated Survey surveys = 1;
}

message UpdateSurveyV1Request {
    Survey survey = 1;
}

message UpdateSurveyV1Response {
}

message RemoveSurveyV1Request {
    uint64 survey_id = 1 [(validate.rules).uint64.gt = 0];
}

message RemoveSurveyV1Response {
}
